[{"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\index.js":"1","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\App.js":"2","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Onbording.js":"3","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Projects.js":"4","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\ProjectScreen.js":"5","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Home.js":"6","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\NotFound.js":"7","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\GraphButtons.js":"8","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Sidebar.js":"9","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Header.js":"10","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Graph.js":"11","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Statistics.js":"12","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\GraphImage.js":"13","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Analysis.js":"14","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\NewSidebar.js":"15","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Interpretaion.js":"16","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Dropzone.js":"17","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Imagelist.js":"18","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\ButtonSelectGraph.js":"19","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\SampleData.js":"20","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\DataForAll.js":"21","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\StacticAnalysis.js":"22","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\EditableTable.js":"23","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\utils\\fields.js":"24","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Thanku.js":"25","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Help.js":"26","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\HelpComponents.js":"27"},{"size":405,"mtime":1661475477220,"results":"28","hashOfConfig":"29"},{"size":1111,"mtime":1661475889041,"results":"30","hashOfConfig":"29"},{"size":752,"mtime":1661079883896,"results":"31","hashOfConfig":"29"},{"size":3951,"mtime":1661086446578,"results":"32","hashOfConfig":"29"},{"size":4429,"mtime":1661441892468,"results":"33","hashOfConfig":"29"},{"size":420,"mtime":1660999666592,"results":"34","hashOfConfig":"29"},{"size":281,"mtime":1661476241118,"results":"35","hashOfConfig":"29"},{"size":115,"mtime":1660285835108,"results":"36","hashOfConfig":"29"},{"size":5072,"mtime":1660387974509,"results":"37","hashOfConfig":"29"},{"size":1670,"mtime":1660387766532,"results":"38","hashOfConfig":"29"},{"size":2246,"mtime":1660451577942,"results":"39","hashOfConfig":"29"},{"size":6815,"mtime":1660813820341,"results":"40","hashOfConfig":"29"},{"size":6502,"mtime":1661441892467,"results":"41","hashOfConfig":"29"},{"size":7651,"mtime":1661406013584,"results":"42","hashOfConfig":"29"},{"size":2823,"mtime":1661476018859,"results":"43","hashOfConfig":"29"},{"size":5449,"mtime":1660813820334,"results":"44","hashOfConfig":"29"},{"size":1186,"mtime":1660813820327,"results":"45","hashOfConfig":"29"},{"size":650,"mtime":1660476712224,"results":"46","hashOfConfig":"29"},{"size":218,"mtime":1660813820324,"results":"47","hashOfConfig":"29"},{"size":5765,"mtime":1660813820338,"results":"48","hashOfConfig":"29"},{"size":2139,"mtime":1661404268469,"results":"49","hashOfConfig":"29"},{"size":7548,"mtime":1661402044602,"results":"50","hashOfConfig":"29"},{"size":14439,"mtime":1661100236262,"results":"51","hashOfConfig":"29"},{"size":1116,"mtime":1661441892470,"results":"52","hashOfConfig":"29"},{"size":731,"mtime":1661404091732,"results":"53","hashOfConfig":"29"},{"size":479,"mtime":1661405529304,"results":"54","hashOfConfig":"29"},{"size":3154,"mtime":1661405634432,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"6o1d76",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\index.js",[],["123","124"],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\App.js",["125","126","127"],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Onbording.js",["128"],"import React, { useEffect } from 'react'\r\nimport axios from \"axios\";\r\nimport Box from \"@mui/material/Box\"\r\nimport Projects from '../components/Projects'\r\nimport { Typography } from '@mui/material';\r\n\r\n\r\nexport const Onbording = () => {\r\n    useEffect(() => {\r\n        axios.get(`http://127.0.0.1:5000`)\r\n          .then(response =>{ setPro(response.data.projects)\r\n        //   console.log(response.data.projects)\r\n        });\r\n      }, []);\r\n\r\n    const [pro,setPro] = React.useState([]);\r\n\r\n    return (\r\n        <Box\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            minHeight=\"100vh\"\r\n            bgcolor=\"#FBF9F9\"\r\n        >\r\n        <Projects project={pro} />\r\n        </Box>\r\n    )\r\n}","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Projects.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\ProjectScreen.js",["129","130","131","132","133","134","135","136","137","138"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport axios from \"axios\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { Box, Stack, Button, Grid, Typography } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport drop from \"../images/drop.svg\";\r\nimport sideupper from \"../images/sideupper.svg\"\r\nimport EditableTable from '../components/EditableTable';\r\nimport fieldsArr from \"../utils/fields\";\r\n//\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport csv from \"csv\";\r\n\r\nimport NewSidebar from '../components/NewSidebar'\r\n\r\nconst ProjectScreen = () => {\r\n  const handleRoute = (id) => {\r\n    console.log(\"route\", id)\r\n    navigate(`/analysis/${id}`); //clicked \r\n  }\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [pro, setPro] = React.useState({});\r\n  const [analysis, setAnalysis] = React.useState(true);\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n\r\n  const [files, setFiles] = React.useState();\r\n  const [fileName, setFileName] = React.useState();\r\n  const onChange = (e) => {\r\n    setFiles(e.target.files[0]);\r\n\r\n    setFileName(e.target.files[0].name);\r\n  }\r\n\r\n  const handleSubmit = async (event) => {\r\n    const data = {\r\n      name: \"file\",\r\n      file: files\r\n    }\r\n    console.log(\"submit clicked\")\r\n    setLoading(true);\r\n    event.preventDefault();\r\n    const resp = await axios.post(`http://127.0.0.1:5000/csv/${params.id}`, data, {\r\n      headers: {\r\n        \"content-type\": \"multipart/form-data\",\r\n      }\r\n    });\r\n    console.log(resp.data);\r\n    setLoading(false);\r\n    setAnalysis(false);\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get(`http://sih-hydrateq.herokuapp.com/project/${params.id}`)\r\n      .then(response => {\r\n        setPro(response.data)\r\n      });\r\n  }, [params.id]);\r\n// data\r\n  const defaultData = [\r\n    {\r\n      name: \"Yash\",\r\n      age: \"23\",\r\n      relationShip: \"haqSeSingle\"\r\n    }\r\n  ];\r\n  const getData = row => {\r\n    console.log(row, \"rows data\");\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Grid container >\r\n        <Grid item xs={2}\r\n          mt={2}\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          // alignItems=\"center\"\r\n          >\r\n          <NewSidebar />\r\n        </Grid>\r\n        <Grid xs={10} item>\r\n          <Box\r\n            display=\"flex\"\r\n            minHeight=\"90vh\"\r\n            bgcolor=\"#FBF9F9\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Stack px={2} py={2} mb={5}>\r\n              <Stack direction=\"row\">\r\n                <Stack direction=\"column\" >\r\n                  <img\r\n                    height={124}\r\n                    width={216}\r\n                    src={drop} alt=\"file Upload\" />\r\n                  <form onSubmit={handleSubmit}>\r\n                    <label htmlFor=\"file\">{fileName}</label>\r\n                    <br />\r\n                    <input\r\n                      id=\"file\"\r\n                      type=\"file\"\r\n                      name=\"selectedFile\"\r\n                      variant=\"outlined\"\r\n                      onChange={event => onChange(event)}\r\n                    />\r\n                  </form>\r\n                  <Stack mt={2}>\r\n                  <Button variant=\"contained\" type=\"submit\" onClick={handleSubmit}>Submit</Button></Stack>\r\n                  {/* <EditableTable\r\n        initWithoutHead\r\n        defaultData={defaultData}\r\n        getData={getData}\r\n        fieldsArr={fieldsArr}\r\n      /> */}\r\n                </Stack>\r\n\r\n                <Stack justifyContent=\"flex-end\"\r\n                        alignItems=\"flex-start\"\r\n                    spacing={6}\r\n                    ml={4}>\r\n                  <img src={sideupper} alt=\"sideupper\" \r\n                    height=\"274\"\r\n                    width=\"300\" />\r\n                </Stack>\r\n              </Stack>\r\n              {!loading ? \"\" : <Stack mt={5}>\r\n                <Box justifyContent=\"center\" sx={{ display: 'flex' }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              </Stack>}\r\n            </Stack>\r\n          </Box>\r\n          <Stack mt={1}\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\">\r\n            <Button variant=\"contained\" disabled={analysis} onClick={() => handleRoute(params.id)}>Analysis</Button></Stack>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n\r\n  )\r\n}\r\nexport default ProjectScreen","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Home.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\NotFound.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\GraphButtons.js",[],["139","140"],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Sidebar.js",["141","142"],"import React, { useState } from \"react\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n// import IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n// import MailIcon from \"@mui/icons-material/Mail\";\r\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\r\n// import DashboardIcon from \"@mui/icons-material/Dashboard\";\r\n// import DevicesIcon from \"@mui/icons-material/Devices\";\r\n// import EventIcon from \"@mui/icons-material/Event\";\r\n// import ExploreIcon from \"@mui/icons-material/Explore\";\r\n// import FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport { Button } from \"@mui/material\";\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport axios from \"axios\"\r\nconst drawerWidth = 220;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    \r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor: \"#0295A9\",\r\n    color: \"  #FFFFFF\",\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n   \r\n  }\r\n}));\r\nexport default function Sidebar({ open, handleDrawerClose , project_id ,statistics}) {\r\nconst [State , setState] = useState(null)\r\n// const submit =() =>{\r\n//   console.log(state)\r\n//   axios.post(`https://sih-hydrateq.herokuapp.com/csv/${project_id}`, state)\r\n//   .then(res => { \r\n//       console.log(res.data)})\r\n// }\r\nconst handleSubmit = async (event) => { // Reset status\r\n  const data = {\r\n    name : \"file\" ,\r\n    file: State\r\n  }\r\n  event.preventDefault();\r\n  const resp = await axios.post(`http://127.0.0.1:5000/csv/${project_id}`, data, {\r\n    headers: {\r\n      \"content-type\": \"multipart/form-data\",\r\n    },\r\n  });\r\n  // console.log(resp.data);\r\n  statistics(resp.data);\r\n};\r\nconst handleInputChange =(e)  =>{\r\n    setState(e.target.files[0])\r\n}\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Drawer\r\n      className={classes.drawer}\r\n      variant=\"persistent\"\r\n      anchor=\"left\"\r\n      open={open}\r\n      classes={{\r\n        paper: classes.drawerPaper\r\n      }}\r\n    >\r\n      <div className={classes.drawerHeader}>\r\n        {/* <IconButton onClick={handleDrawerClose}>\r\n          <ChevronLeftIcon />\r\n        </IconButton> */}\r\n      </div>\r\n      <Divider />\r\n      <div className=\"\">\r\n        {/* <List>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <MailIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Mail\" />\r\n          </ListItem>\r\n\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <EventIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Events\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <ExploreIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Explore\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <FavoriteIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Favorites\" />\r\n          </ListItem>\r\n        </List> */}\r\n        <Divider />\r\n        <List>\r\n          {/* <ListItem button>\r\n            <ListItemIcon>\r\n              <DevicesIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Devices\" />\r\n          </ListItem> */}\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <SettingsIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Settings\" />\r\n          </ListItem>\r\n          <ListItem button onClick={handleDrawerClose} >\r\n            <ListItemIcon  >\r\n\r\n              <ChevronLeftIcon />\r\n\r\n            </ListItemIcon >\r\n            <ListItemText primary=\"Back\" />\r\n          </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n        <form onSubmit={handleSubmit}>\r\n          <ListItem>\r\n          {/* <ListItemIcon button >          \r\n         < UploadFileIcon/>\r\n            </ListItemIcon> */}\r\n              <input\r\n                type=\"file\"\r\n                onChange={handleInputChange}\r\n                inputProps={{\r\n                  accept:\r\n                    \".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\r\n                }}\r\n              />\r\n          </ListItem>\r\n          <ListItem>\r\n          <button type=\"submit\">Save</button>\r\n          </ListItem>\r\n          </form>\r\n        </List>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n}\r\n",["143","144"],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Header.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Graph.js",["145","146","147","148","149"],"import React, { useState } from 'react'\r\nimport { Stack, Button ,Card} from '@mui/material'\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport GraphImage from './GraphImage';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport AddchartIcon from '@mui/icons-material/Addchart';\r\nimport axios from \"axios\";\r\nconst Graph = (props) => {\r\n  const [image, setImage] = useState(\"gibbsDiagram\");\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [display, setDisplay] = useState(false);\r\n  \r\n  const handeleClick = (item) => {\r\n    setImage(item);\r\n    axios.get(`http://localhost:5000/graph/${image}/${props.project_id}`)\r\n      .then(response => {\r\n        setDisplay(true);\r\n        setImageUrl(`http://localhost:5000/graph/${image}/${props.project_id}`)\r\n      }).catch(error => {\r\n        console.log(error)\r\n      }\r\n      )\r\n  }\r\n  console.log(image)\r\nreturn (\r\n  <Stack>\r\n    <Stack direction=\"row\" spacing={1} m={1}>\r\n      {graphs.map((item, index) => {\r\n        return (\r\n          <Button key={index}\r\n            variant=\"contained\"\r\n            style={{ backgroundColor: \"#FDD037\", }}\r\n            onClick={() => { handeleClick(item) }}\r\n            // color=\"#FDD037\"\r\n            startIcon={<AddchartIcon />}\r\n          >\r\n            {item}\r\n          </Button>)\r\n      }\r\n      )}\r\n    </Stack>\r\n\r\n\r\n\r\n     {display?\r\n     \r\n     \r\n     \r\n     <Card sx={{ maxWidth: 300 }}>\r\n      {/* <img\r\n        src={imageUrl}\r\n        alt={image}\r\n      /> */}\r\n      <CardMedia\r\n                  style={{\r\n                    width: \"auto\",\r\n                    maxHeight: \"200px\"\r\n                  }}\r\n                  component=\"img\"\r\n                  image={imageUrl}\r\n                  title={ image}\r\n                />\r\n    </Card>\r\n    \r\n    \r\n    :\"\"}\r\n  </Stack>\r\n)\r\n}\r\n\r\nconst graphs = [\r\n  \"color_piper\",\r\n  \"gibbsDiagram\",\r\n  \"trianglePiperDaigram\",\r\n  // \"rectangle_piper\",\r\n  \"chadha\",\r\n  \"chernoff\",\r\n  \"color_piper\",\r\n  // \"contour_piper\",\r\n  \"durvo\",\r\n  // \"gaillardet\",\r\n  // \"hfed\",\r\n  // \"schoeller\",\r\n  \"stiff\"\r\n]\r\nexport default Graph","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Statistics.js",["150","151"],"import React, { useEffect } from 'react'\r\nimport {Stack ,Typography } from \"@mui/material\"\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport TablePagination from '@mui/material/TablePagination';\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Sample Name', minWidth: 120 },\r\n  { id: 'sar', label: 'Sodium adsorption ratio (SAR)', minWidth: 170 },\r\n  {\r\n    id: 'solNa',\r\n    label: 'Soluble Na%',\r\n    minWidth: 150,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: 'rsc',\r\n    label: 'residual sodium carbonate(RSC)',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: 'wqi',\r\n    label: 'Water Quality Index(WQI)',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toFixed(2),\r\n  },\r\n];\r\nconst Statistics = (props) => {\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n  const data = props.desc\r\n  const sar_data = props.sar;\r\n\r\n\r\n  function createData1(name,rsc,sar,solNa,wqi) {\r\n    if(data.length === 0) { \r\n      return null\r\n    }\r\n    return {name , rsc,sar,solNa,wqi};\r\n  }\r\n  const rows1 = [\r\n  ];\r\n  sar_data.map((data , index) => {\r\n    let name = \"sample\" + (index+1);\r\n    let item = createData1(name ,data.rsc, data.sar, data.solNa, data.wqi);\r\n    rows1.push(item);\r\n  });\r\n  console.log(rows1)\r\n  // ----------------------------Table 1---------------------------------------\r\n  function createData(name , mean  , std , min ,max ,percentile75) {\r\n    if(data.length === 0) {\r\n      return null\r\n    }\r\n    return { name ,mean , std , min ,max , percentile75};\r\n  }\r\n  \r\n  // console.log(sar_data)\r\n  // console.log(data)\r\n  \r\n  const rows = [\r\n    createData('pH',data.pH[1],data.pH[2],data.pH[3], data.pH[7],data.pH[6]),\r\n    createData('Ca',data.Ca[1],data.Ca[2],data.Ca[3], data.Ca[7],data.Ca[6]),\r\n    createData('Cl',data.Cl[1],data.Cl[2],data.Cl[3], data.Cl[7],data.Cl[6]),\r\n    createData('F',data.F[1],data.F[2],data.F[3], data.F[7],data.F[6]),\r\n    createData('HCO3',data.HCO3[1],data.HCO3[2],data.HCO3[3], data.HCO3[7],data.HCO3[6]),\r\n    createData('KNa',data.KNa[1],data.KNa[2],data.KNa[3], data.KNa[7],data.KNa[6]),\r\n    createData('Mg',data.Mg[1],data.Mg[2],data.Mg[3], data.Mg[7],data.Mg[6]),\r\n    createData('NO3',data.NO3[1],data.NO3[2],data.NO3[3], data.NO3[7],data.NO3[6]),\r\n    createData('SO4',data.SO4[1],data.SO4[2],data.SO4[3], data.SO4[7],data.SO4[6]),\r\n    createData('TDS',data.TDS[1],data.TDS[2],data.TDS[3], data.TDS[7],data.TDS[6]),\r\n  ];\r\n  return (\r\n    <Stack spacing={3} >\r\n   <Stack >\r\n    <Typography variant='h5' style={{color:\"black\"}} align=\"center\"\r\n                 sx={{textDecoration: 'underline'}} > Analysis</Typography>\r\n                 <Stack>\r\n          <Typography variant='outline1' style={{color:\"black\"}} align=\"center\">Max ,Min , SD, Varience </Typography></Stack>\r\n   </Stack>\r\n<Stack>\r\n\r\n\r\n{/* ------------------------TBALE 1--------------------------------------------------- */}\r\n<TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Descriptive analysis</TableCell>\r\n            <TableCell align=\"right\">Mean</TableCell>\r\n            <TableCell align=\"right\">STD.</TableCell>\r\n            <TableCell align=\"right\">Max</TableCell>\r\n            <TableCell align=\"right\">Min</TableCell>\r\n            <TableCell align=\"right\">75%</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow\r\n              key={row.name}\r\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.mean}</TableCell>\r\n              <TableCell align=\"right\">{row.std}</TableCell>\r\n              <TableCell align=\"right\">{row.max}</TableCell>\r\n              <TableCell align=\"right\">{row.min}</TableCell>\r\n              <TableCell align=\"right\">{row.percentile75}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n\r\n</Stack>\r\n\r\n\r\n{/* ------------------------tBALE2 ----------------------> */}\r\n\r\n\r\n<Paper sx={{ width: '100%' }} mt={3}>\r\n      <TableContainer sx={{ maxHeight: 440 }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\" colSpan={6}>\r\n               \r\n              SAR,Soluble Na %,RSC And WQI\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ top: 57, minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows1\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format && typeof value === 'number'\r\n                            ? column.format(value)\r\n                            : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n</Stack>\r\n\r\n  )\r\n}\r\nexport default Statistics","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\GraphImage.js",["152","153","154","155"],"import React, { useState } from 'react'\r\nimport ImageList from '@mui/material/ImageList';\r\nimport ImageListItem from '@mui/material/ImageListItem';\r\nimport { Stack  , Card ,CardContent ,Typography} from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { saveAs } from \"file-saver\"\r\n\r\n\r\nconst GraphImage = (props) => {\r\n  //model\r\n\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xl'));\r\n \r\n  const [open, setOpen] = React.useState(false);\r\n  const [graphName, setGraphName] = React.useState('');\r\n  // const [graphLink, setGraphLink] = React.useState('');\r\n\r\n  const handleDownload =(value , name)=>{\r\n    console.log(value)\r\n    console.log(name)\r\n    // saveAs('', 'image.jpg')\r\n    saveAs(`${value}`, `${name}.jpg`);\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n// Button onclick\r\n  console.log(props.id)\r\n  const imageClick=(image)=>{\r\n    console.log(\"image clicked \" + image)\r\n    setOpen(true);\r\n    setGraphName(image);\r\n    // setGraphLink(`http://127.0.0.1:5000/graph/${graphName}/${props.id}`);\r\n  }\r\n  return (\r\n    <Stack direction=\"column\" spacing={1}>\r\n      <Stack direction=\"row\" spacing={3}>\r\n      <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"trianglePiperdiagram\")}>\r\n          <img\r\n            src={`http://127.0.0.1:5000/graph/trianglePiperdiagram/${props.id}`}\r\n            alt=\"trianglePiperdiagram\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Triangle Piper Diagram\r\n            </Typography>\r\n          </CardContent>\r\n          </Card>\r\n          <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"gibbsDiagram\")}>\r\n          <img\r\n            src={`http://127.0.0.1:5000/graph/gibbsDiagram/${props.id}`}\r\n            alt=\"gibsDiagram\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n          <CardContent>   \r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Gibbs Diagram\r\n            </Typography>\r\n          </CardContent>\r\n\r\n        </Card>\r\n        <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"rectanglePiper\")}>\r\n          <img\r\n            src={`http://127.0.0.1:5000/graph/rectanglePiper/${props.id}`}\r\n            alt=\"rectanglePiper\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Rectangle Piper\r\n            </Typography>\r\n          </CardContent>\r\n\r\n          </Card>\r\n          <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"durvoDiagram\")}>\r\n          <img\r\n            src={`http://127.0.0.1:5000/graph/durvoDiagram/${props.id}`}\r\n            alt=\"durvoDiagram\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Durvo Diagram\r\n            </Typography>\r\n          </CardContent>\r\n\r\n        </Card>\r\n      </Stack>\r\n\r\n      <Stack direction=\"row\" spacing={2}>\r\n        <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"hfedDiagram\")}>\r\n        <img\r\n          src={`http://127.0.0.1:5000/graph/hfedDiagram/${props.id}`}\r\n          alt=\"hfedDiagram\"\r\n          loading=\"lazy\"\r\n          width=\"250px\"\r\n          height=\"176.57px\"\r\n        />\r\n        <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n          Hfed Diagram\r\n        </Typography>\r\n      </CardContent>\r\n        </Card>\r\n        <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"chadhaDiagram\")}>\r\n        <img\r\n          src={`http://127.0.0.1:5000/graph/chadhaDiagram/${props.id}`}\r\n          alt=\"chadhaDiagram\"\r\n          loading=\"lazy\"\r\n          width=\"250px\"\r\n          height=\"176.57px\"\r\n        />\r\n        <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n          Chadha Diagram\r\n        </Typography>\r\n      </CardContent>\r\n\r\n        </Card>\r\n        <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"color_piperDiagram\")} >\r\n        <img\r\n            src={`http://127.0.0.1:5000/graph/color_piperDiagram/${props.id}`}\r\n            alt=\"gibsDiagram\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n\r\n\r\n          <CardContent>\r\n\r\n\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Color Piper Diagram\r\n            </Typography>\r\n          </CardContent>\r\n\r\n        </Card>\r\n        <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"schoellerDiagram\")}>\r\n          <img\r\n            src={`http://127.0.0.1:5000/graph/schoellerDiagram/${props.id}`}\r\n            alt=\"schoellerDiagram\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Schoeller Diagram\r\n            </Typography>\r\n          </CardContent>\r\n          \r\n        </Card>\r\n      </Stack>\r\n      <Dialog open={open} onClose={handleClose} fullScreen={fullScreen}>\r\n        <DialogTitle>{graphName}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            \r\n          </DialogContentText>\r\n          <img\r\n            src={`http://127.0.0.1:5000/graph/${graphName}/${props.id}`}\r\n            alt={graphName}\r\n            loading=\"lazy\"\r\n            width=\"fit-content\"\r\n            height=\"700px\"\r\n            />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={()=>handleDownload(`http://127.0.0.1:5000/graph/${graphName}/${props.id}`,graphName) }>Download</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Stack>\r\n  )\r\n}\r\nexport default GraphImage","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Analysis.js",["156","157","158","159"],"import React, { useEffect } from 'react'\r\nimport axios from \"axios\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Stack  , Button} from '@mui/material';\r\nimport { Typography ,Card ,CardContent } from '@mui/material';\r\nimport NewSidebar from '../components/NewSidebar';\r\nimport GraphImage from '../components/GraphImage';\r\nimport Interpretaion from '../components/Interpretaion';\r\nimport Statistics from '../components/Statistics';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport SampleData from '../components/SampleData';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { saveAs } from \"file-saver\"\r\nconst Analysis = () => {\r\n  const params = useParams();\r\n  const [Display, setDisplay] = React.useState(true);\r\n  const [pro, setPro] = React.useState([]);\r\n  const [description, setDescription] = React.useState([]);\r\n  const [sar , setSar] = React.useState([]);\r\n  const [MeanSar , setMeanSar] = React.useState([]);\r\n  const [wqi , setWqi] = React.useState([]);\r\n  const [ShowData ,setShowData] = React.useState(false);\r\n  const [Samples ,setSamples] = React.useState();\r\n  const [alignment, setAlignment] = React.useState('Interpretaion');\r\n  \r\n  const handleChange = (event, newAlignment) => {\r\n    setAlignment(newAlignment);\r\n    setShowData(!ShowData)\r\n  };\r\n  useEffect(() => {\r\n    axios.get(`http://127.0.0.1:5000/wqi/${params.id}`)\r\n            .then(res => {\r\n                setMeanSar(res.data.sar.mean)\r\n                setWqi(res.data.wqi.mean)\r\n            })\r\n            .catch(err => console.log(err))\r\n    axios.get(`http://127.0.0.1:5000/project/${params.id}`)\r\n      .then(response => {\r\n        setPro(response.data)\r\n      });\r\n    axios.get(`http://127.0.0.1:5000/csv/${params.id}`)\r\n      .then(response => { setDescription(response.data) })\r\n      .catch(err => (console.log(err)));\r\n\r\n    axios.get(`http://127.0.0.1:5000/sar/${params.id}`)\r\n      .then(response => {\r\n        setSar(response.data)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n    axios.get(`http://127.0.0.1:5000/sample/${params.id}`)\r\n    .then(response => { setSamples(response.data)\r\n      console.log(response.data)})\r\n  }, [params.id]);\r\n  console.log(description)\r\n  if(description == null){\r\n    setDisplay(false)}\r\n  const [project, setProject] = React.useState({});\r\n  useEffect(() => {\r\n    axios.get(`http://127.0.0.1:5000`)\r\n      .then(res => {\r\n        setProject(res.data.projects)\r\n      })\r\n      .catch(err => console.log(err))\r\n  }, [])\r\n\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xl'));\r\n \r\n  const [open, setOpen] = React.useState(false);\r\n  const [graphName, setGraphName] = React.useState('');\r\n  // const [graphLink, setGraphLink] = React.useState('');\r\n\r\n  const handleDownload =(value , name)=>{\r\n    console.log(value)\r\n    console.log(name)\r\n    // saveAs('', 'image.jpg')\r\n    saveAs(`${value}`, `${name}.jpg`);\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n// Button onclick\r\n  const imageClick=(image)=>{\r\n    console.log(\"image clicked \" + image)\r\n    setOpen(true);\r\n    setGraphName(image);\r\n    // setGraphLink(`http://127.0.0.1:5000/graph/${graphName}/${props.id}`);\r\n  }\r\n  return (\r\n    <Box\r\n      minHeight=\"100vh\"\r\n      // bgcolor=\"#FBF9F9 \"\r\n    >\r\n      <Stack>\r\n      <ToggleButtonGroup\r\n  color=\"primary\"\r\n  exclusive\r\n  onChange={handleChange}\r\n  aria-label=\"Platform\"\r\n>\r\n  \r\n  {/* <ToggleButton value=\"web\">Interpretaion</ToggleButton>\r\n  <ToggleButton value=\"android\">Data</ToggleButton> */}\r\n</ToggleButtonGroup>\r\n      </Stack>\r\n{!Display ? (<Typography>No sample found in your Project </Typography>): ShowData?(\r\n<Stack>\r\n  <SampleData Samples={Samples}/>\r\n  </Stack>\r\n  ):\r\n      (<div>\r\n      <Grid container spacing={2}  mt={3}>\r\n        <Grid item xs={2}>\r\n        <NewSidebar project={pro} all_projects={project} />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Box \r\n          pl={1}\r\n          bgcolor=\"#FBF9F9 \"\r\n          >\r\n          <Stack spacing={3} mt={2}>\r\n          <Typography variant='h5' align='center' sx={{ textDecoration: 'underline' }} > Data Processing</Typography>\r\n          <Stack direction=\"row\" spacing={3}>\r\n      <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"cleandata\")} >\r\n        <img\r\n            src={`http://127.0.0.1:5000/graph/cleandata/${params.id}`}\r\n            alt=\"cleandata\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n          <CardContent>\r\n\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Heat Map\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n        <Card sx={{ minWidth: 250 }} onClick={() => imageClick(\"clustring\")} >\r\n        <img\r\n            src={`http://127.0.0.1:5000/graph/clustring/${params.id}`}\r\n            alt=\"clustring\"\r\n            loading=\"lazy\"\r\n            width=\"250px\"\r\n            height=\"176.57px\"\r\n          />\r\n          <CardContent>\r\n\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              Clustring \r\n            </Typography>\r\n          </CardContent>\r\n\r\n        </Card>\r\n    </Stack>\r\n            <Typography variant='h5' style={{ color: \"black\" }} align=\"center\"\r\n              sx={{ textDecoration: 'underline' }} > Visualization</Typography>\r\n              {(description.length===0)? (<Typography>No data avialble </Typography>):\r\n            ( <Stack spacing={5}><GraphImage id={params.id} /></Stack>)}\r\n            \r\n            {(description.length===0)? (<Typography>No data avialble </Typography>):\r\n            (<Statistics desc={description}  sar={sar}/>)\r\n            }\r\n          </Stack>\r\n          </Box>\r\n        </Grid>\r\n      </Grid> \r\n      <Stack spacing={2} mt={2}> <Typography  sx={{ textDecoration: 'underline' }} variant='h5' align='center'> Interpretaion</Typography></Stack>\r\n      <Box mx={2} my={2} px={1} py={2} bgcolor=\"#D9D9D9\">\r\n      {(description.length===0)? (<Typography>No data avialble </Typography>):\r\n            (<Interpretaion desc={description}  project_id={params.id} MeanSar={MeanSar} wqi={wqi}/>)\r\n            }\r\n        \r\n      </Box>\r\n      </div>)}\r\n      {/* <Button onClick={handelDocument}>DOWNLOAD ANALYSIS</Button> */}\r\n      <Dialog open={open} onClose={handleClose} fullScreen={fullScreen}>\r\n        <DialogTitle>{graphName}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            \r\n          </DialogContentText>\r\n          <img\r\n            src={`http://127.0.0.1:5000/graph/${graphName}/${params.id}`}\r\n            alt={graphName}\r\n            loading=\"lazy\"\r\n            width=\"fit-content\"\r\n            height=\"700px\"\r\n            />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={()=>handleDownload(`http://127.0.0.1:5000/graph/${graphName}/${params.id}`,graphName) }>Download</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Analysis","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\NewSidebar.js",["160","161","162"],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Interpretaion.js",["163","164","165","166"],"import { Typography , Stack} from '@mui/material'\r\nimport React  , {useEffect}from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\nconst Interpretaion = (props) => {\r\n    const desc = props.desc;\r\n    const [na ,setNa] = React.useState([]);\r\n    const [sample , setSample] = React.useState([]);\r\n    const [MeanSar , setMeanSar] = React.useState([]);\r\n    // first we need to get the data from the database\r\n\r\n    async function getData(){\r\n        await axios.get(`http://127.0.0.1:5000/na/${props.project_id}`)\r\n            .then(res => {\r\n                setNa(res.data)\r\n                // console.log(res.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n        await axios.get(`http://127.0.0.1:5000/sample/${props.project_id}`)\r\n            .then(res => {\r\n                setSample(res.data)\r\n                // console.log(res)\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    useEffect(() => {\r\n        getData()\r\n    },[])\r\n    // console.log(wqi)\r\n    const max_na= Math.max(...na)\r\n    const max_cl = desc.Cl[7]\r\n    const max_ca = desc.Ca[7]\r\n    const max_hc03 = desc.HCO3[7]\r\n    const max_kna = desc.KNa[7]\r\n    const max_mg = desc.Mg[7]\r\n    const max_f = desc.F[7]\r\n    const max_no3 = desc.NO3[7]\r\n    const max_so4 = desc.SO4[7]\r\n    // console.log(max_na,max_cl,max_ca,max_kna,max_mg,max_f,max_no3,max_so4 ,max_hc03)\r\n    const cation={\r\n        'Na':max_na,\r\n        'Ca':max_ca,\r\n        'KNa':max_kna,\r\n        'Mg':max_mg,\r\n    }\r\n    const anion={\r\n        'F':max_f,\r\n        'NO3':max_no3,\r\n        'SO4':max_so4,\r\n        'Cl':max_cl,\r\n        'HCO3':max_hc03,\r\n    }\r\n    const sorted_cation = Object.keys(cation).sort(function(a, b) { return cation[a] - cation[b] });\r\n    // console.log(sorted_cation)\r\n    const sorted_anion = Object.keys(anion).sort(function(a, b) { return anion[a] - anion[b] });\r\n    // console.log(sorted_anion)\r\n    // date from description\r\n    // console.log(desc)\r\n    const meanph = desc.pH[1]\r\n    const minph = desc.pH[3]\r\n    const maxph = desc.pH[7]\r\n    const meanFUNC =(mean)=>{\r\n        if(mean < 7.0 && mean >= 5.5){\r\n            return \"slightly  Acidic\"\r\n        }\r\n        else if(mean >= 7.0 && mean < 8.0){\r\n            return \"Slightly alkaline\"\r\n        }\r\n        else if(mean >= 8.0){\r\n            return \"Highly alkaline\"\r\n        }\r\n        else if(mean < 5.5){\r\n            return \"Highly acidic\"\r\n        }\r\n        else if (mean === 7.0){\r\n            return \"Neutral\"\r\n        }\r\n    }\r\n // water quality index check\r\n    const wqiQuality = (wqi)=>{\r\n        if(wqi < 26){\r\n            return \"Excellent\"\r\n        }\r\n        else if(wqi >= 26 && wqi < 50){\r\n            return \"Good  \"\r\n        }\r\n        else if(wqi >= 51 && wqi < 75){\r\n            return \"Poor\"\r\n        }\r\n        else if(wqi >= 76){\r\n            return \"Unsuitable\"\r\n        }\r\n    }\r\n    // water quality index\r\n    const mean_sar = props.MeanSar\r\n    const wqi = props.wqi\r\n    console.log(props.MeanSar)\r\n    const sar =(mean)=>{\r\n        if(mean <= 9 && mean >= 1){\r\n            return ([\"Sodium hazard of water is low\" ,\"Use on sodium sensitive crops must be cautioned\"])\r\n        }\r\n        else if(mean >9 && mean <= 17){\r\n            return ([\"Sodium  hazard of water is moderate\" , \"amendments such as gypsum,  lime, and calcium chloride are recommended\"])\r\n        }\r\n        else if(mean > 17 && mean <= 25){\r\n            return ([\"Sodium hazard of water is high\" , \"Generally unsuitable for continuous cultivation\"])\r\n        }\r\n        else if(mean < 25){\r\n            return ([\"Sodium hazard of water is very high\" , \"Unsuitable for use in cultivation\"])\r\n        }  \r\n    }\r\n    return (\r\n        <Stack>\r\n            <Typography variant=\"body\" gutterBottom>\r\n            The Groundwater of the given area was generally {meanFUNC(meanph)} with pH ranging from\r\n                { minph } to { maxph}.\r\n            {/* The Groundwater of the given area was generally {weakly} {alkaline} with pH ranging from\r\n                {7.8 }to {8.5.} */}\r\n                </Typography>\r\n            <Typography varient=\"body1\">\r\n            {sorted_anion[4] } and {sorted_anion[3]} are the major anions and {sorted_cation[3]} and {sorted_anion[2]} are the major cations.\r\n        </Typography>\r\n        <Typography   varient=\"h6\">\r\n            Order of anions\r\n            </Typography>\r\n        <Typography varient=\"body1\">\r\n            {sorted_anion[4] } &gt; {sorted_anion[3]}  &gt; {sorted_anion[2]} &gt; {sorted_anion[1]} &gt; {sorted_anion[0]}  \r\n        </Typography>\r\n        <Typography varient=\"h6\">\r\n            Order of cation\r\n            </Typography>\r\n        <Typography varient=\"body1\">\r\n        {sorted_cation[3]}  &gt; {sorted_cation[2]} &gt; {sorted_cation[1]} &gt; {sorted_cation[0]}  \r\n            </Typography>\r\n            <Stack direction=\"row\" spacing={3}> \r\n        <Typography varient=\"body1\">\r\n            mean sar of sample {mean_sar} so {sar(mean_sar)[0]}\r\n            </Typography>\r\n            <Typography varient=\"body1\">\r\n            {sar(mean_sar)[1]}\r\n            </Typography>\r\n            </Stack>\r\n            <Stack>\r\n                <Typography varient=\"body1\">\r\n                    the Water quality index of samples is { wqi } so sample is {wqiQuality(wqi)} for the purpose of drinking water.\r\n                </Typography>\r\n            </Stack>\r\n        </Stack> \r\n    )\r\n\r\n}\r\n\r\nexport default Interpretaion","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Dropzone.js",[],["167","168"],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\Imagelist.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\ButtonSelectGraph.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\SampleData.js",["169"],"import React from 'react'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n// Icons\r\nimport ModeEditOutlineIcon from '@mui/icons-material/ModeEditOutline';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\n\r\n// styling\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      width: \"auto\",\r\n      marginTop: theme.spacing(3),\r\n      overflowX: \"auto\"\r\n    },\r\n    table: {\r\n      minWidth: 650\r\n    },\r\n    selectTableCell: {\r\n      width: 60\r\n    },\r\n    tableCell: {\r\n      width: \"auto\",\r\n      height: 40\r\n    },\r\n    input: {\r\n      width: 130,\r\n      height: 40\r\n    }\r\n  }));\r\n\r\n  //data function\r\nconst createData = (id,sample_name ,tds,sulfate,sodium,potassiumSodium,ph,nitrate,magnesium,bicarbonate,calcium,alk) => {\r\n    return {id,sample_name,tds,sulfate,sodium,potassiumSodium,ph,nitrate,magnesium,bicarbonate,calcium,alk}};\r\n\r\n\r\nconst CustomTableCell = ({ row, sample_name, onChange }) => {\r\n    const classes = useStyles();\r\n    const { isEditMode } = row;\r\n    return (\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        {isEditMode ? (\r\n          <Input\r\n            value={row[sample_name]}\r\n            name={sample_name}\r\n            onChange={e => onChange(e, row)}\r\n            className={classes.input}\r\n          />\r\n        ) : (\r\n          row[sample_name]\r\n        )}\r\n      </TableCell>\r\n    );\r\n  };\r\n  \r\n \r\nconst SampleData = (props) => {\r\n\r\n\r\n    const rows1 = [];\r\n    props.Samples.map((data , index) => {\r\n      let item = createData(index,data.sample_name ,data.tds, data.sulfate, data.sodium, data.ph, data.nitrate, data.magnesium, data.bicarbonate, data.calcium, data.alk);\r\n      rows1.push(item);\r\n    });\r\n\r\n\r\n    console.log(rows1)\r\n    const [rows, setRows] = React.useState(rows1);\r\n    console.log(rows[0].sample_name)\r\n\r\n\r\n\r\nconst [previous, setPrevious] = React.useState({});\r\nconst classes = useStyles();\r\n\r\n\r\n\r\n  const onToggleEditMode = id => {\r\n    setRows(state => {\r\n      return rows.map(row => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious(state => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map(row => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n//   const onRevert = id => {\r\n//     const newRows = rows.map(row => {\r\n//       if (row.id === id) {\r\n//         return previous[id] ? previous[id] : row;\r\n//       }\r\n//       return row;\r\n//     });\r\n//     setRows(newRows);\r\n//     setPrevious(state => {\r\n//       delete state[id];\r\n//       return state;\r\n//     });\r\n//     onToggleEditMode(id);\r\n//   };\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"caption table\">\r\n        {/* <caption>A barbone structure table example with a caption</caption> */}\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"left\" />\r\n            <TableCell align=\"left\">Sample name</TableCell>\r\n            <TableCell align=\"left\">tds</TableCell>\r\n            <TableCell align=\"left\">sulfate</TableCell>\r\n            <TableCell align=\"left\">sodium</TableCell>\r\n            <TableCell align=\"left\">potassiumSodium</TableCell>\r\n            <TableCell align=\"left\">ph</TableCell>\r\n            <TableCell align=\"left\">nitrate</TableCell>\r\n            <TableCell align=\"left\">magnesium</TableCell>\r\n            <TableCell align=\"left\">bicarbonate</TableCell>\r\n            <TableCell align=\"left\">calcium</TableCell>\r\n            <TableCell align=\"left\">alk</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.id}>\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      onClick={() => onToggleEditMode(row.id)}\r\n                    >\r\n                      <DoneIcon />\r\n                    </IconButton>\r\n                    {/* <IconButton\r\n                      aria-label=\"revert\"\r\n                      onClick={() => onRevert(row.id)}\r\n                    >\r\n                      \r\n                    </IconButton> */}\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <ModeEditOutlineIcon/>\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n              <CustomTableCell {...{ row, sample_name: \"sample0\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"calories\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"fat\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"carbs\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"protein\", onChange }} />\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default SampleData","C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\DataForAll.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\StacticAnalysis.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\EditableTable.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\utils\\fields.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Thanku.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\screens\\Help.js",[],"C:\\Users\\shiva\\OneDrive\\Desktop\\hydrateq\\src\\components\\HelpComponents.js",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":19},{"ruleId":"174","severity":1,"message":"178","line":4,"column":20,"nodeType":"176","messageId":"177","endLine":4,"endColumn":26},{"ruleId":"174","severity":1,"message":"179","line":7,"column":3,"nodeType":"176","messageId":"177","endLine":7,"endColumn":7},{"ruleId":"174","severity":1,"message":"180","line":5,"column":10,"nodeType":"176","messageId":"177","endLine":5,"endColumn":20},{"ruleId":"174","severity":1,"message":"181","line":1,"column":28,"nodeType":"176","messageId":"177","endLine":1,"endColumn":36},{"ruleId":"174","severity":1,"message":"182","line":1,"column":38,"nodeType":"176","messageId":"177","endLine":1,"endColumn":49},{"ruleId":"174","severity":1,"message":"180","line":4,"column":36,"nodeType":"176","messageId":"177","endLine":4,"endColumn":46},{"ruleId":"174","severity":1,"message":"183","line":8,"column":8,"nodeType":"176","messageId":"177","endLine":8,"endColumn":21},{"ruleId":"174","severity":1,"message":"184","line":9,"column":8,"nodeType":"176","messageId":"177","endLine":9,"endColumn":17},{"ruleId":"174","severity":1,"message":"185","line":13,"column":10,"nodeType":"176","messageId":"177","endLine":13,"endColumn":21},{"ruleId":"174","severity":1,"message":"186","line":14,"column":8,"nodeType":"176","messageId":"177","endLine":14,"endColumn":11},{"ruleId":"174","severity":1,"message":"187","line":25,"column":10,"nodeType":"176","messageId":"177","endLine":25,"endColumn":13},{"ruleId":"174","severity":1,"message":"188","line":64,"column":9,"nodeType":"176","messageId":"177","endLine":64,"endColumn":20},{"ruleId":"174","severity":1,"message":"189","line":71,"column":9,"nodeType":"176","messageId":"177","endLine":71,"endColumn":16},{"ruleId":"170","replacedBy":"190"},{"ruleId":"172","replacedBy":"191"},{"ruleId":"174","severity":1,"message":"192","line":18,"column":10,"nodeType":"176","messageId":"177","endLine":18,"endColumn":16},{"ruleId":"174","severity":1,"message":"193","line":19,"column":8,"nodeType":"176","messageId":"177","endLine":19,"endColumn":22},{"ruleId":"170","replacedBy":"194"},{"ruleId":"172","replacedBy":"195"},{"ruleId":"174","severity":1,"message":"196","line":3,"column":8,"nodeType":"176","messageId":"177","endLine":3,"endColumn":16},{"ruleId":"174","severity":1,"message":"197","line":4,"column":8,"nodeType":"176","messageId":"177","endLine":4,"endColumn":17},{"ruleId":"174","severity":1,"message":"198","line":5,"column":8,"nodeType":"176","messageId":"177","endLine":5,"endColumn":24},{"ruleId":"174","severity":1,"message":"199","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":19},{"ruleId":"174","severity":1,"message":"200","line":7,"column":8,"nodeType":"176","messageId":"177","endLine":7,"endColumn":18},{"ruleId":"174","severity":1,"message":"201","line":1,"column":17,"nodeType":"176","messageId":"177","endLine":1,"endColumn":26},{"ruleId":"202","severity":1,"message":"203","line":59,"column":31,"nodeType":"204","messageId":"205","endLine":59,"endColumn":33},{"ruleId":"174","severity":1,"message":"181","line":1,"column":17,"nodeType":"176","messageId":"177","endLine":1,"endColumn":25},{"ruleId":"174","severity":1,"message":"206","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":17},{"ruleId":"174","severity":1,"message":"207","line":3,"column":8,"nodeType":"176","messageId":"177","endLine":3,"endColumn":21},{"ruleId":"174","severity":1,"message":"208","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":17},{"ruleId":"174","severity":1,"message":"209","line":4,"column":10,"nodeType":"176","messageId":"177","endLine":4,"endColumn":16},{"ruleId":"174","severity":1,"message":"210","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":13},{"ruleId":"174","severity":1,"message":"211","line":14,"column":8,"nodeType":"176","messageId":"177","endLine":14,"endColumn":20},{"ruleId":"174","severity":1,"message":"212","line":35,"column":10,"nodeType":"176","messageId":"177","endLine":35,"endColumn":19},{"ruleId":"174","severity":1,"message":"213","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":12},{"ruleId":"174","severity":1,"message":"214","line":4,"column":42,"nodeType":"176","messageId":"177","endLine":4,"endColumn":46},{"ruleId":"174","severity":1,"message":"215","line":8,"column":9,"nodeType":"176","messageId":"177","endLine":8,"endColumn":17},{"ruleId":"174","severity":1,"message":"216","line":9,"column":12,"nodeType":"176","messageId":"177","endLine":9,"endColumn":18},{"ruleId":"174","severity":1,"message":"217","line":10,"column":12,"nodeType":"176","messageId":"177","endLine":10,"endColumn":19},{"ruleId":"174","severity":1,"message":"218","line":10,"column":22,"nodeType":"176","messageId":"177","endLine":10,"endColumn":32},{"ruleId":"219","severity":1,"message":"220","line":29,"column":7,"nodeType":"221","endLine":29,"endColumn":9,"suggestions":"222"},{"ruleId":"170","replacedBy":"223"},{"ruleId":"172","replacedBy":"224"},{"ruleId":"202","severity":1,"message":"203","line":67,"column":38,"nodeType":"204","messageId":"205","endLine":67,"endColumn":40},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-unused-vars","'Onbording' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'Typography' is defined but never used.","'useState' is defined but never used.","'useCallback' is defined but never used.","'EditableTable' is defined but never used.","'fieldsArr' is defined but never used.","'useDropzone' is defined but never used.","'csv' is defined but never used.","'pro' is assigned a value but never used.","'defaultData' is assigned a value but never used.","'getData' is assigned a value but never used.",["225"],["226"],"'Button' is defined but never used.","'UploadFileIcon' is defined but never used.",["225"],["226"],"'Checkbox' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'FormControl' is defined but never used.","'GraphImage' is defined but never used.","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ImageList' is defined but never used.","'ImageListItem' is defined but never used.","'TextField' is defined but never used.","'styled' is defined but never used.","'Paper' is defined but never used.","'ToggleButton' is defined but never used.","'alignment' is assigned a value but never used.","'Grid' is defined but never used.","'Card' is defined but never used.","'navigate' is assigned a value but never used.","'sample' is assigned a value but never used.","'MeanSar' is assigned a value but never used.","'setMeanSar' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["227"],["225"],["226"],"no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},"Update the dependencies array to be: [getData]",{"range":"230","text":"231"},[969,971],"[getData]"]